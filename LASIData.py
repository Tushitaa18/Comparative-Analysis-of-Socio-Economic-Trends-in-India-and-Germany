# -*- coding: utf-8 -*-
"""Final Tushitaa's Copy of Pobability_prjTRY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mHi1TYdkhH10e6GHpQpCxt0sA3PQY3Z8
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
sns.set(color_codes = True)
from scipy import stats

df = pd.read_excel('/content/drive/MyDrive/LASI_India_State_UT_Factsheet-Final Checked 23.08.22.xlsx')

for col in df.columns:
    print(col)

"""
# Plotting the scatter plot
df.plot(kind='scatter', x='Mean Household Size1', y='Health insurance coverage (%)', s=32, alpha=0.8)
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()
"""

print(np.var(df['Currently smoking (%)39']), np.var(df['Chronic lung diseases (%)47']))

df.plot(kind='scatter', x='Currently smoking (%)39', y='Chronic lung diseases (%)47', s=32, alpha=0.8)
plt.xlabel('Currently smoking (%)')
plt.ylabel('Chronic lung diseases (%)')
# plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

# Calculate Pearson correlation coefficient and p-value
corr, p_value = stats.pearsonr(df['Currently smoking (%)39'], df['Chronic lung diseases (%)47'])

# Set significance level
alpha = 0.15

print("Correlation coefficient:", corr)
print("P-value:", p_value)
print("alpha :", alpha )
# null hypothesis = there is no correlation b/w the two
if p_value < alpha:
    print("Reject the null hypothesis. There is significant evidence of a correlation between Currently smoking and Chronic lung diseases.")
else:
    print("Accept the null hypothesis. There is no significant evidence of a correlation between Currently smoking and Chronic lung diseases.")

df.plot(kind='scatter', x='Currently smoking (%)39', y='Chronic lung diseases (%)47', s=32, alpha=0.8)
# plt.gca().spines[['top', 'right']].set_visible(False)
plt.xlabel('Currently smoking (%)')
plt.ylabel('Chronic lung diseases (%)')
plt.show()

# Calculate Pearson correlation coefficient and p-value
corr, p_value = stats.pearsonr(df['Currently smoking (%)39'], df['Chronic lung diseases (%)47'])

# Set significance level
alpha = 0.05

print("Correlation coefficient:", corr)
print("P-value:", p_value)
print("alpha :", alpha )
# null hypothesis = there is no correlation b/w the two
if p_value < alpha:
    print("Reject the null hypothesis. There is significant evidence of a correlation between Currently smoking and Chronic lung diseases.")
else:
    print("Accept the null hypothesis. There is no significant evidence of a correlation between Currently smoking and Chronic lung diseases.")

"""
Certainly! Here's a polished version:

Upon analysis, it's evident that at a 95% confidence interval (CI), there appears to be no discernible correlation between the two chronic diseases and current smoking habits. However, intriguingly, when we extend the CI, it becomes apparent that there exists a correlation among these variables.

Confidence interval (CI) reflects the range in which we are confident the true correlation lies. In statistical hypothesis testing, the alpha level, commonly denoted as Î±, determines the threshold for determining statistical significance. The 95% CI corresponds to an alpha level of 0.05, meaning that there's a 5% chance of observing a relationship purely due to random chance.

Hence, while a 95% CI might suggest no correlation, relaxing the constraint by increasing the CI could unveil underlying associations. This highlights the importance of considering the choice of CI and alpha level in statistical analysis, as they profoundly influence the conclusions drawn from the data.

"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
# Assuming x and y are your data points
x = df['Literate (%)']
y = df['No schooling (%)']
# Perform linear regression
slope, intercept, r_value, p_value, std_err = linregress(x, y)
# Plot the scatter plot
plt.scatter(x, y, label='Data Points')
# Plot the regression line
plt.plot(x, slope * x + intercept, color='red', label='Linear Regression')
# Add labels, legend, etc.
plt.xlabel('Literate (%)')
plt.ylabel('No schooling (%)')
plt.legend()
plt.title('Linear Regression')
# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()
corr, p_value = stats.pearsonr(df['Literate (%)'], df['No schooling (%)'])

# Set significance level
alpha = 0.05

print("Correlation coefficient:", corr)
print("P-value:", p_value)
print("alpha :", alpha )
# null hypothesis = there is no correlation b/w the two
if p_value < alpha:
    print("Reject the null hypothesis. There is significant evidence of a correlation between Literate (%) and No schooling (%)")
else:
    print("Accept the null hypothesis. There is no significant evidence of a correlation between Literate (%) and No schooling (%)")

"""The graph shows literacy rate going up as the number of people with no schooling goes down. This might look like a positive connection, but the correlation coefficient (-0.9996) tells a different story. It shows a very strong opposite relationship. In other words, higher literacy rates mean a much smaller percentage of people with no schooling. There might be a few exceptions in the data, but overall, there's a clear connection between more education leading to better literacy rates."""

import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'df' is your DataFrame
# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='Persons reporting satisfied with their own life (%)34', y='Satisfied with current living arrangement (%)29', s=32, alpha=0.8)

# Set the x and y axis labels
ax.set_xlabel('Persons reporting satisfied with their own life')
ax.set_ylabel('Satisfied with current living arrangement')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the plot
plt.show()


# Calculate Pearson correlation coefficient and p-value
corr, p_value = stats.pearsonr(df['Persons reporting satisfied with their own life (%)34'], df['Satisfied with current living arrangement (%)29'])

# Set significance level
alpha = 0.02

print("Correlation coefficient:", corr)
print("P-value:", p_value)
print("alpha :", alpha )
# null hypothesis = there is no correlation b/w the two
if p_value < alpha:
    print("Reject the null hypothesis. Tere is correlation")
else:
    print("Fail to reject the null hypothesis. There is no significant evidence of a correlation ")

# Calculate the median values for x and y variables
median_x = df['Persons reporting satisfied with their own life (%)34'].median()
median_y = df['Satisfied with current living arrangement (%)29'].median()

# Perform quadrant analysis
quadrant1 = df[(df['Persons reporting satisfied with their own life (%)34'] >= median_x) & (df['Satisfied with current living arrangement (%)29'] >= median_y)]
quadrant2 = df[(df['Persons reporting satisfied with their own life (%)34'] < median_x) & (df['Satisfied with current living arrangement (%)29'] >= median_y)]
quadrant3 = df[(df['Persons reporting satisfied with their own life (%)34'] < median_x) & (df['Satisfied with current living arrangement (%)29'] < median_y)]
quadrant4 = df[(df['Persons reporting satisfied with their own life (%)34'] >= median_x) & (df['Satisfied with current living arrangement (%)29'] < median_y)]

# Count the number of data points in each quadrant
count_quadrant1 = len(quadrant1)
count_quadrant2 = len(quadrant2)
count_quadrant3 = len(quadrant3)
count_quadrant4 = len(quadrant4)

# Print the count of data points in each quadrant
print("Number of data points in Quadrant 1:", count_quadrant1)
print("Number of data points in Quadrant 2:", count_quadrant2)
print("Number of data points in Quadrant 3:", count_quadrant3)
print("Number of data points in Quadrant 4:", count_quadrant4)

# Visualize the quadrants on the scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df['Persons reporting satisfied with their own life (%)34'], df['Satisfied with current living arrangement (%)29'], s=32, alpha=0.8)

# Plot median lines
plt.axvline(median_x, color='r', linestyle='--', linewidth=1)
plt.axhline(median_y, color='r', linestyle='--', linewidth=1)

# Add annotations for quadrants
plt.text(median_x, median_y, 'Q2', fontsize=12, ha='right', va='bottom')
plt.text(median_x, median_y, 'Q1', fontsize=12, ha='left', va='bottom')
plt.text(median_x, median_y, 'Q3', fontsize=12, ha='left', va='top')
plt.text(median_x, median_y, 'Q4', fontsize=12, ha='right', va='top')

plt.xlabel('Persons reporting satisfied with their own life')
plt.ylabel('Satisfied with current living arrangement')
plt.title('Quadrant Analysis')

plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame containing the data

# Plot the scatter plot
df.plot(kind='scatter', x='Satisfied with current living arrangement (%)29', y='Yoga practice, meditation, asana and pranayama (%)43', s=32, alpha=0.8)


# Calculate median values for x and y axes
x_median = df['Satisfied with current living arrangement (%)29'].median()
y_median = df['Yoga practice, meditation, asana and pranayama (%)43'].median()

# Divide the data into four quadrants
quadrant_I = df[(df['Satisfied with current living arrangement (%)29'] > x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] > y_median)]
quadrant_II = df[(df['Satisfied with current living arrangement (%)29'] < x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] > y_median)]
quadrant_III = df[(df['Satisfied with current living arrangement (%)29'] < x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] < y_median)]
quadrant_IV = df[(df['Satisfied with current living arrangement (%)29'] > x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] < y_median)]

# Plot shaded regions for each quadrant
plt.fill_between(df['Satisfied with current living arrangement (%)29'], y_median, df['Yoga practice, meditation, asana and pranayama (%)43'], where=(df['Satisfied with current living arrangement (%)29'] > x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] > y_median), color='skyblue', alpha=0.3)
plt.fill_between(df['Satisfied with current living arrangement (%)29'], y_median, df['Yoga practice, meditation, asana and pranayama (%)43'], where=(df['Satisfied with current living arrangement (%)29'] < x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] > y_median), color='orange', alpha=0.3)
plt.fill_between(df['Satisfied with current living arrangement (%)29'], y_median, df['Yoga practice, meditation, asana and pranayama (%)43'], where=(df['Satisfied with current living arrangement (%)29'] < x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] < y_median), color='green', alpha=0.3)
plt.fill_between(df['Satisfied with current living arrangement (%)29'], y_median, df['Yoga practice, meditation, asana and pranayama (%)43'], where=(df['Satisfied with current living arrangement (%)29'] > x_median) & (df['Yoga practice, meditation, asana and pranayama (%)43'] < y_median), color='red', alpha=0.3)

# Show the plot
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

# Print the counts
print("Quadrant I:", len(quadrant_I))
print("Quadrant II:", len(quadrant_II))
print("Quadrant III:", len(quadrant_III))
print("Quadrant IV:", len(quadrant_IV))

"""Top Right Quadrant (Sky Blue): This quadrant contains individuals who reported higher than median satisfaction with their living arrangement and practice yoga more than the median.


Top Left Quadrant (Orange): This quadrant contains individuals who reported lower than median satisfaction with their living arrangement but practice yoga more than the median. This could indicate that yoga practice might be a coping mechanism for those who are less satisfied with their living arrangement.


Bottom Left Quadrant (Green): This quadrant contains individuals who reported lower than median satisfaction with their living arrangement and also practice yoga less than the median.


Bottom Right Quadrant (Red): This quadrant contains individuals who reported higher than median satisfaction with their living arrangement but practice yoga less than the median.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame containing the data

# Plot the scatter plot
df.plot(kind='scatter', x='Households with water facility inside dwelling/own yard (%)', y='Any water-borne disease (%)63', s=32, alpha=0.8)

# Calculate median values for x and y axes
x_median = df['Households with water facility inside dwelling/own yard (%)'].median()
y_median = df['Any water-borne disease (%)63'].median()

# Divide the data into four quadrants
quadrant_I = df[(df['Households with water facility inside dwelling/own yard (%)'] > x_median) & (df['Any water-borne disease (%)63'] > y_median)]
quadrant_II = df[(df['Households with water facility inside dwelling/own yard (%)'] < x_median) & (df['Any water-borne disease (%)63'] > y_median)]
quadrant_III = df[(df['Households with water facility inside dwelling/own yard (%)'] < x_median) & (df['Any water-borne disease (%)63'] < y_median)]
quadrant_IV = df[(df['Households with water facility inside dwelling/own yard (%)'] > x_median) & (df['Any water-borne disease (%)63'] < y_median)]

# Plot shaded regions for each quadrant
plt.fill_between(df['Households with water facility inside dwelling/own yard (%)'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with water facility inside dwelling/own yard (%)'] > x_median) & (df['Any water-borne disease (%)63'] > y_median), color='skyblue', alpha=0.3)
plt.fill_between(df['Households with water facility inside dwelling/own yard (%)'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with water facility inside dwelling/own yard (%)'] < x_median) & (df['Any water-borne disease (%)63'] > y_median), color='orange', alpha=0.3)
plt.fill_between(df['Households with water facility inside dwelling/own yard (%)'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with water facility inside dwelling/own yard (%)'] < x_median) & (df['Any water-borne disease (%)63'] < y_median), color='green', alpha=0.3)
plt.fill_between(df['Households with water facility inside dwelling/own yard (%)'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with water facility inside dwelling/own yard (%)'] > x_median) & (df['Any water-borne disease (%)63'] < y_median), color='red', alpha=0.3)

# Show the plot
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

# Print the counts
print("Quadrant I:", len(quadrant_I))
print("Quadrant II:", len(quadrant_II))
print("Quadrant III:", len(quadrant_III))
print("Quadrant IV:", len(quadrant_IV))

"""The quadrant analysis suggests a need for targeted interventions in areas with high water-borne disease prevalence despite improved drinking water sources, while also highlighting successful models for disease prevention in regions with both good access to clean water and low disease incidences.

The quadrant analysis reveals a nuanced relationship between access to improved drinking water sources and the prevalence of water-borne diseases:

Areas in Quadrant I exhibit high occurrences of water-borne diseases despite relatively good access to improved drinking water sources, suggesting potential issues with water quality or sanitation infrastructure that need urgent attention to mitigate health risks.

Quadrant II indicates regions with both low access to improved drinking water sources and high incidences of water-borne diseases, emphasizing the critical need for interventions to improve water infrastructure and sanitation facilities to reduce disease burden.

In Quadrant III, where both access to improved drinking water sources and the prevalence of water-borne diseases are low, efforts should focus on maintaining and potentially expanding access to clean water sources to sustain positive health outcomes.

Quadrant IV reflects areas with adequate access to improved drinking water sources and low occurrences of water-borne diseases, highlighting successful initiatives in providing clean water and effective disease prevention measures. These areas serve as models for best practices in public health and sanitation.
"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame containing the data

# Plot the scatter plot
df.plot(kind='scatter', x='Households with improved drinking water source (%)6', y='Any water-borne disease (%)63', s=32, alpha=0.8)

# Calculate median values for x and y axes
x_median = df['Households with improved drinking water source (%)6'].median()
y_median = df['Any water-borne disease (%)63'].median()

# Divide the data into four quadrants
quadrant_I = df[(df['Households with improved drinking water source (%)6'] > x_median) & (df['Any water-borne disease (%)63'] > y_median)]
quadrant_II = df[(df['Households with improved drinking water source (%)6'] < x_median) & (df['Any water-borne disease (%)63'] > y_median)]
quadrant_III = df[(df['Households with improved drinking water source (%)6'] < x_median) & (df['Any water-borne disease (%)63'] < y_median)]
quadrant_IV = df[(df['Households with improved drinking water source (%)6'] > x_median) & (df['Any water-borne disease (%)63'] < y_median)]

# Plot shaded regions for each quadrant
plt.fill_between(df['Households with improved drinking water source (%)6'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with improved drinking water source (%)6'] > x_median) & (df['Any water-borne disease (%)63'] > y_median), color='skyblue', alpha=0.3)
plt.fill_between(df['Households with improved drinking water source (%)6'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with improved drinking water source (%)6'] < x_median) & (df['Any water-borne disease (%)63'] > y_median), color='orange', alpha=0.3)
plt.fill_between(df['Households with improved drinking water source (%)6'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with improved drinking water source (%)6'] < x_median) & (df['Any water-borne disease (%)63'] < y_median), color='green', alpha=0.3)
plt.fill_between(df['Households with improved drinking water source (%)6'], y_median, df['Any water-borne disease (%)63'], where=(df['Households with improved drinking water source (%)6'] > x_median) & (df['Any water-borne disease (%)63'] < y_median), color='red', alpha=0.3)

# Show the plot
plt.gca().spines[['top', 'right']].set_visible(False)
plt.show()

# Print the counts
print("Quadrant I:", len(quadrant_I))
print("Quadrant II:", len(quadrant_II))
print("Quadrant III:", len(quadrant_III))
print("Quadrant IV:", len(quadrant_IV))

"""The quadrant analysis reveals distinct patterns regarding household's access to improved drinking water sources and the incidence of water-borne diseases. Quadrant I signifies households with high access to clean water and low disease incidence, while Quadrant IV indicates the opposite trend despite improved water sources. Quadrant II suggests factors beyond water quality influencing disease prevalence, while Quadrant III highlights challenges faced by households with both low water quality and high disease rates. This analysis underscores the multifaceted nature of water-borne disease prevention, emphasizing the need for holistic approaches addressing sanitation, hygiene, and environmental factors alongside water source improvements to enhance public health outcomes."""

# Plot the scatter plot using df.plot()
df.plot(kind='scatter', x='Satisfied with current living arrangement (%)29', y='Mean income from all sources 25', s=32, alpha=0.8)
plt.xlabel('Satisfied with current living arrangement')
plt.ylabel('Mean income from all sources')
# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Show the plot
plt.show()
# Calculate Pearson correlation coefficient and p-value
corr, p_value = stats.pearsonr(df['Satisfied with current living arrangement (%)29'], df['Mean income from all sources 25'])

# Set significance level
alpha = 0.10

print("Correlation coefficient:", corr)
print("P-value:", p_value)
print("alpha :", alpha )
# null hypothesis = there is no correlation b/w the two
if p_value < alpha:
    print("Reject the null hypothesis. Tere is correlation")
else:
    print("Accept the null hypothesis. There is no significant evidence of a correlation ")

"""The correlation coefficient between satisfaction with current living arrangement and mean income from all sources is  0.2157 and the p-value is 0.1997. Since the p-value is greater than the significance level (alpha) of 0.1, we fail to reject the null hypothesis. In other words, there is not statistically significant evidence to conclude that there is a correlation between satisfaction with current living arrangement and mean income from all sources.

The scatter plot further supports this conclusion. There is no clear linear pattern in the data points, suggesting that there is no strong relationship between the two variables. While there may be a weak positive correlation visually, it is not statistically significant.

"""

import matplotlib.pyplot as plt
import pandas as pd
# Create a block heatmap
plt.hist2d(df['Agricultural and allied activities21'],
           df['Per Capita Annual Household Income (in INR) 12'],
           bins=20, cmap='inferno')

plt.colorbar(label='Count')  # Add a colorbar for reference

plt.xlabel('Agricultural and allied activities')
plt.ylabel('Per Capita Annual Household Income')

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

plt.show()

"""The heatmap doesn't reveal a clear relationship between involvement in agricultural and allied activities and per capita annual household income. However, it's well documented that many Indians are migrating away from agriculture due to lower income compared to other sectors. This trend suggests that the data may show a scattered distribution, where some areas with high agricultural activity might have lower average incomes.

Further analysis, such as looking at regional data or time series trends, could help determine if there's a causal link between low agricultural income and people leaving the sector.
"""

import seaborn as sns
# Specify the data and the axes
data = df[['Agricultural and allied activities21', 'Per Capita Annual Household Income (in INR) 12']]

# Create a heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

# Add labels and title
plt.xlabel('Agricultural and allied activities')
plt.ylabel('Per Capita Annual Household Income')
plt.title('Heatmap of Correlation')

# Show the plot
plt.show()

# Plot the scatter plot using df.plot()
df.plot(kind='scatter', x='Persons seeking job (%)26', y='Ever worked (%)19', s=32, alpha=0.8)

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Show the plot
plt.show()

import seaborn as sns

# Assuming df is your DataFrame containing the data
# Specify the data and the axes
data = df[['Persons seeking job (%)26', 'Ever worked (%)19']]

# Create a heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

# Add labels and title
plt.xlabel('Persons seeking job (%)')
plt.ylabel('Ever worked (%)')
plt.title('Heatmap of Correlation')

# Show the plot
plt.show()

"""The provided code snippet and the image you described generate a correlation heatmap that analyzes the relationship between two variables:

Persons seeking job (%)26: This represents the percentage of people in the data set who are looking for a job.
Ever worked (%)19: This represents the percentage of people in the data set who have ever been employed.
Color and Value Interpretation:

Color: The color intensity in each cell indicates the correlation coefficient between the two variables.
Blue: Negative correlation (values tend to move in opposite directions)
Orange: Positive correlation (values tend to move in the same direction)
White: Weak or no correlation (little to no relationship between the variables)
Values: Numbers within the cells represent the correlation coefficient, ranging from -1 (perfect negative correlation) to +1 (perfect positive correlation), with 0 indicating no correlation.
Interpretation:

The heatmap shows a very weak negative correlation coefficient of approximately -0.13 between "Persons seeking job" and "Ever worked."  This is because the color leans slightly blue and the value is close to zero.

A negative correlation here might seem counter-intuitive, but it can be explained by considering the way the data is phrased. "Ever worked" refers to the total population, including those currently employed and those not. So, a higher percentage of people who have ever worked could also include a higher percentage no longer working (i.e. retired).  Therefore, a slight negative correlation might emerge because areas with a high percentage of people who have ever worked (including retirees) might also have a higher percentage of people seeking jobs (because they are no longer employed).

Important Note:

Correlation doesn't imply causation. Just because there's a weak negative correlation doesn't necessarily mean that one variable causes the other. Other factors could be influencing both variables.
In conclusion, the heatmap suggests a very weak negative relationship between the two variables.  This means there's practically no significant association between the percentage of people seeking jobs and the percentage of people who have ever worked.
"""

ax = df.plot(kind='scatter', x='Widowed (%)', y='Awareness of Indira Gandhi Widow Pension Scheme (%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Widowed (%)')
ax.set_ylabel('Widow pension Awareness (%)')

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Show the plot
plt.show()

ax = df.plot(kind='scatter', x='Widowed (%)', y='Receiving Benefits from Indira Gandhi Widow Pension Scheme (%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Widowed (%)')
ax.set_ylabel('Widow pension Benefits (%)')

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Show the plot
plt.show()

# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='Awareness of Indira Gandhi National Old Age Pension Scheme (%)', y='Receiving Benefits from Indira Gandhi National Old Age Pension Scheme (%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Awareness (%)')
ax.set_ylabel('Benefits (%)')

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Show the plot
plt.show()

# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='High Cholesterol (%)', y='Obesity by Anthropometric Indicators(%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('High Cholesterol (%)')
ax.set_ylabel('Obesity(%)')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the plot
plt.show()

"""# import pandas as pd
import matplotlib.pyplot as plt

# Assuming df contains the dataset

# Calculate the averages for each column
avg_high_cholesterol = df['High Cholesterol (%)'].mean()
avg_obesity = df['Obesity by Anthropometric Indicators(%)'].mean()

# Plot the scatter plot
ax = df.plot(kind='scatter', x='High Cholesterol (%)', y='Obesity by Anthropometric Indicators(%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('High Cholesterol (%)')
ax.set_ylabel('Obesity(%)')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Perform quadrant analysis
top_right = df[(df['High Cholesterol (%)'] > avg_high_cholesterol) & (df['Obesity by Anthropometric Indicators(%)'] > avg_obesity)]
top_left = df[(df['High Cholesterol (%)'] < avg_high_cholesterol) & (df['Obesity by Anthropometric Indicators(%)'] > avg_obesity)]
bottom_right = df[(df['High Cholesterol (%)'] > avg_high_cholesterol) & (df['Obesity by Anthropometric Indicators(%)'] < avg_obesity)]
bottom_left = df[(df['High Cholesterol (%)'] < avg_high_cholesterol) & (df['Obesity by Anthropometric Indicators(%)'] < avg_obesity)]

# Print number of data points in each quadrant
print("Top Right Quadrant:", len(top_right))
print("Top Left Quadrant:", len(top_left))
print("Bottom Right Quadrant:", len(bottom_right))
print("Bottom Left Quadrant:", len(bottom_left))

# Show the plot
plt.show()

Top Right Quadrant: This quadrant holds the most data points, indicating a positive correlation between high cholesterol and obesity. As cholesterol percentage increases, the data points tend to show an increase in obesity percentage as well.
Top Left Quadrant: This quadrant has fewer data points compared to the bottom left, suggesting a weaker positive correlation or even a neutral relationship between high cholesterol and obesity for individuals with lower cholesterol levels.
Bottom Right Quadrant: This quadrant has a few data points, indicating that some individuals with high cholesterol have a lower obesity percentage.
Bottom Left Quadrant: This quadrant holds the least data points, showing that a smaller proportion of individuals have both low cholesterol and low obesity.
"""

# Calculate the median values for x and y variables
median_x = df['High Cholesterol (%)'].median()
median_y = df['Overweight by Anthropometric Indicators(%)'].median()

# Perform quadrant analysis
quadrant1 = df[(df['High Cholesterol (%)'] >= median_x) & (df['Overweight by Anthropometric Indicators(%)'] >= median_y)]
quadrant2 = df[(df['High Cholesterol (%)'] < median_x) & (df['Overweight by Anthropometric Indicators(%)'] >= median_y)]
quadrant3 = df[(df['High Cholesterol (%)'] < median_x) & (df['Overweight by Anthropometric Indicators(%)'] < median_y)]
quadrant4 = df[(df['High Cholesterol (%)'] >= median_x) & (df['Overweight by Anthropometric Indicators(%)'] < median_y)]

# Count the number of data points in each quadrant
count_quadrant1 = len(quadrant1)
count_quadrant2 = len(quadrant2)
count_quadrant3 = len(quadrant3)
count_quadrant4 = len(quadrant4)

# Print the count of data points in each quadrant
print("Number of data points in Quadrant 1:", count_quadrant1)
print("Number of data points in Quadrant 2:", count_quadrant2)
print("Number of data points in Quadrant 3:", count_quadrant3)
print("Number of data points in Quadrant 4:", count_quadrant4)

# Visualize the quadrants on the scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df['High Cholesterol (%)'], df['Overweight by Anthropometric Indicators(%)'], s=32, alpha=0.8)

# Plot median lines
plt.axvline(median_x, color='r', linestyle='--', linewidth=1)
plt.axhline(median_y, color='r', linestyle='--', linewidth=1)

# Add annotations for quadrants
plt.text(median_x, median_y, 'Q1', fontsize=12, ha='left', va='bottom')
plt.text(median_x, median_y, 'Q2', fontsize=12, ha='right', va='bottom')
plt.text(median_x, median_y, 'Q3', fontsize=12, ha='right', va='top')
plt.text(median_x, median_y, 'Q4', fontsize=12, ha='left', va='top')

plt.xlabel('High Cholesterol (%)')
plt.ylabel('Overweight by Anthropometric Indicators(%)')
plt.title('Quadrant Analysis')

plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

# Assuming your data is already loaded into a pandas DataFrame named 'df'

# Define a threshold for benefit received (e.g., 50%)
benefit_threshold = 50

# Create a new binary variable based on the threshold
df['Benefit Received'] = (df['Receiving Benefits from Indira Gandhi National Old Age Pension Scheme (%)'] >= benefit_threshold).astype(int)

# Plot the scatter plot (optional)
ax = df.plot(kind='scatter', x='Awareness of Indira Gandhi National Old Age Pension Scheme (%)',
            y='Receiving Benefits from Indira Gandhi National Old Age Pension Scheme (%)', s=32, alpha=0.8,
            c=df['Benefit Received'], cmap='viridis')  # Color points based on benefit received

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Awareness (%)')
ax.set_ylabel('Benefits (%)')

# Add legend for color mapping (optional)
handles, labels = ax.get_legend_handles_labels()
plt.legend(handles, ['Benefit Not Received', 'Benefit Received'], title='Benefit Status')

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Perform logistic regression (on the binary variable)
model = LogisticRegression()
model.fit(df[['Awareness of Indira Gandhi National Old Age Pension Scheme (%)']], df['Benefit Received'])

# Predictions are probabilities between 0 and 1 (benefit received or not)

# Further analysis based on model results (optional)

# ... (e.g., plot decision boundary)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Assuming df is your DataFrame containing the data
awareness = df['Awareness of Indira Gandhi National Old Age Pension Scheme (%)']
benefits = df['Receiving Benefits from Indira Gandhi National Old Age Pension Scheme (%)']

# Create a 2D histogram of the data
heatmap, xedges, yedges = np.histogram2d(awareness, benefits, bins=20)

# Plot the heatmap
plt.imshow(heatmap.T, origin='lower', extent=[xedges[0], xedges[-1], yedges[0], yedges[-1]], cmap='inferno')
plt.colorbar(label='Frequency')

# Set the x and y axis labels with shorter forms
plt.xlabel('Awareness of Old Age Pension Scheme (%) (%)')
plt.ylabel('Benefits (%)')

# Show the plot
plt.show()
corr, p_value = stats.pearsonr(df['Awareness of Indira Gandhi National Old Age Pension Scheme (%)'], df['Receiving Benefits from Indira Gandhi National Old Age Pension Scheme (%)'])

# Set significance level
alpha = 0.05

print("Correlation coefficient:", corr)
print("P-value:", p_value)
print("alpha :", alpha )
# null hypothesis = there is no correlation b/w the two
if p_value < alpha:
    print("Reject the null hypothesis. There is significant evidence of a correlation ")
else:
    print("Accept the null hypothesis. There is no significant evidence of a correlation ")

"""While the heatmap visualizes the relationship between awareness of the old age pension scheme and frequency, the correlation coefficient of 0.515 suggests a weak positive correlation. This means that there is a slight tendency for awareness of the scheme to increase with more frequent communication.
Itâs important to note that the correlation coefficient is relatively low, so the relationship is not very strong.
Additionally, even though the p-value of 0.0011 is statistically significant at the alpha level of 0.05, it doesnât necessarily imply causation. There might be other factors influencing awareness of the pension scheme.
"""

import matplotlib.pyplot as plt

# Data
mean_expenditure_public_hospitalization = [8877, 2105, 3914, 17131, 8606, 7618, 22285, 4438, 360, 13397, 69347, 12180, 2138, 12279, 27971, 24270, 15255, 10058, 14266, 14885, 3878, 13042, 14927, 22975, 20484, 35850, 9015, 2403, 13389, 8804, 8606, 2255, 4132, 5245, 6535, 17633, 6466]
mean_expenditure_private_hospitalization = [52022, 127099, 34054, 60415, 37131, 32608, 13448, 19848, 48664, 24522, 27795, 34201, 36180, 19302, 93405, 69110, 23835, 125825, 32862, 55847, 26239, 24883, 48706, 33079, 25362, 28825, 38521, 56668, 32270, 23239, 37131, 39242, 35108, 95578, 22949, 42015, 38019]
mean_expenditure_total_hospitalization = [36219, 24341, 27764, 24601, 21528, 25037, 21120, 11916, 22912, 21284, 57019, 20730, 26484, 17456, 48486, 31941, 21826, 102840, 25053, 33694, 17095, 22771, 25272, 26598, 23000, 32812, 18042, 26734, 27021, 16542, 21528, 28176, 27319, 17455, 17619, 34812, 15824]

# Plot
plt.figure(figsize=(10, 6))
plt.plot(mean_expenditure_public_hospitalization, label='Public Facility', marker='o')
plt.plot(mean_expenditure_private_hospitalization, label='Private Facility', marker='s')
plt.plot(mean_expenditure_total_hospitalization, label='Total', marker='^')

# Add labels and title
plt.xlabel('Observation')
plt.ylabel('Mean Expenditure (INR)')
plt.title('Mean Expenditure on Last Hospitalization by Type of Facility')
plt.legend()

# Show plot
plt.grid(True)
plt.show()

"""The mean expenditure on hospitalization is significantly higher in private facilities compared to public facilities in India. The graph shows the average cost for public hospitalization ranging between â¹360 and â¹69,347, while private hospitalization costs range from â¹13,448 to â¹127,099. The overall average expenditure on hospitalization falls between â¹3,621 and â¹102,840.

It is important to note that this data only shows the mean expenditure, and there can be a significant variation in costs depending on the specific hospital, condition, and procedures required. Additionally, the data does not account for out-of-pocket expenses, which can be a significant burden for patients in both public and private hospitals.
"""

# Sort the DataFrame by 'Literate (%)'
sorted_df = df.sort_values(by='Literate (%)', ascending=False)

# Create a scatter plot using the sorted DataFrame
plt.scatter(x=sorted_df['Literate (%)'], y=sorted_df[' Sex Ratio (Females per 1000 Males ) All ages'], s=32, alpha=0.8)

# Calculate statistical measures
mean_literate = np.mean(sorted_df['Literate (%)'])
median_literate = np.median(sorted_df['Literate (%)'])
std_literate = np.std(sorted_df['Literate (%)'])

mean_sex_ratio = np.mean(sorted_df[' Sex Ratio (Females per 1000 Males ) All ages'])
median_sex_ratio = np.median(sorted_df[' Sex Ratio (Females per 1000 Males ) All ages'])
std_sex_ratio = np.std(sorted_df[' Sex Ratio (Females per 1000 Males ) All ages'])

# Add mean lines to the plot
plt.axvline(x=mean_literate, color='r', linestyle='--', label=f'Mean Literate (%): {mean_literate:.2f}')
plt.axhline(y=mean_sex_ratio, color='b', linestyle='--', label=f'Mean Sex Ratio: {mean_sex_ratio:.2f}')

# Remove the top and right spines from the plot
plt.gca().spines[['top', 'right']].set_visible(False)

# Show statistical measures
print("Literate (%) Statistics:")
print(f"Mean: {mean_literate:.2f}")
print(f"Median: {median_literate:.2f}")
print(f"Standard Deviation: {std_literate:.2f}")
print("\nSex Ratio Statistics:")
print(f"Mean: {mean_sex_ratio:.2f}")
print(f"Median: {median_sex_ratio:.2f}")
print(f"Standard Deviation: {std_sex_ratio:.2f}")

# Add labels and legend
plt.xlabel('Literate (%)')
plt.ylabel('Sex Ratio (Females per 1000 Males)')
plt.title('Scatter Plot with Mean Lines')
plt.legend()

# Show the plot
plt.show()

# Calculate the median values for x and y variables
median_x = df['Per Capita Annual Household Income (in INR) 12'].median()
median_y = df['Households covered by any health insurance (%) 17'].median()

# Perform quadrant analysis
quadrant1 = df[(df['Per Capita Annual Household Income (in INR) 12'] >= median_x) & (df['Households covered by any health insurance (%) 17'] >= median_y)]
quadrant2 = df[(df['Per Capita Annual Household Income (in INR) 12'] < median_x) & (df['Households covered by any health insurance (%) 17'] >= median_y)]
quadrant3 = df[(df['Per Capita Annual Household Income (in INR) 12'] < median_x) & (df['Households covered by any health insurance (%) 17'] < median_y)]
quadrant4 = df[(df['Per Capita Annual Household Income (in INR) 12'] >= median_x) & (df['Households covered by any health insurance (%) 17'] < median_y)]

# Count the number of data points in each quadrant
count_quadrant1 = len(quadrant1)
count_quadrant2 = len(quadrant2)
count_quadrant3 = len(quadrant3)
count_quadrant4 = len(quadrant4)

# Print the count of data points in each quadrant
print("Number of data points in Quadrant 1:", count_quadrant1)
print("Number of data points in Quadrant 2:", count_quadrant2)
print("Number of data points in Quadrant 3:", count_quadrant3)
print("Number of data points in Quadrant 4:", count_quadrant4)

# Visualize the quadrants on the scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(df['Per Capita Annual Household Income (in INR) 12'], df['Households covered by any health insurance (%) 17'], s=32, alpha=0.8)

# Plot median lines
plt.axvline(median_x, color='r', linestyle='--', linewidth=1)
plt.axhline(median_y, color='r', linestyle='--', linewidth=1)

# Add annotations for quadrants
plt.text(median_x, median_y, 'Q1', fontsize=12, ha='left', va='bottom')
plt.text(median_x, median_y, 'Q2', fontsize=12, ha='right', va='bottom')
plt.text(median_x, median_y, 'Q3', fontsize=12, ha='right', va='top')
plt.text(median_x, median_y, 'Q4', fontsize=12, ha='left', va='top')

plt.xlabel('Per Capita Annual Household Income (in INR)')
plt.ylabel('Households covered by any health insurance (%)')
plt.title('Quadrant Analysis')

plt.grid(True)
plt.show()

"""The quadrant analysis of the provided data reveals insightful patterns regarding household income and health insurance coverage. In Quadrant 1, characterized by high income and high health insurance coverage with 11 data points, affluent communities enjoy robust access to healthcare, likely yielding better outcomes. Quadrant 2, with 8 data points, showcases regions where despite lower income levels, health insurance coverage remains relatively high, possibly due to targeted initiatives. Quadrant 3, encompassing 10 data points, portrays areas facing socioeconomic challenges with both low income and limited health insurance coverage, indicating barriers to accessing healthcare. Quadrant 4, with 8 data points, highlights regions of high income but low health insurance coverage, suggesting potential gaps in insurance access despite economic advantage. These findings underscore the multifaceted dynamics of healthcare accessibility and emphasize the need for targeted interventions to address disparities and ensure equitable healthcare access across communities."""

# Sort the DataFrame by 'Sex Ratio (Females per 1000 Males) All ages' column in descending order
sorted_df = df.sort_values(by=' Sex Ratio (Females per 1000 Males ) All ages', ascending=True)

# Take the top 10 rows
top_10_df = sorted_df.head(5)

# Plot the scatter plot
top_10_df.plot(kind='scatter', x=df.columns[0], y=' Sex Ratio (Females per 1000 Males ) All ages', s=32, alpha=0.8)

# Remove top and right spines
plt.gca().spines[['top', 'right']].set_visible(False)

# Set x-axis label
plt.xlabel("States and UTs")

# Show the plot
plt.show()

"""Top 5 states/union territories with the lowest sex ratio."""

# Sort the DataFrame by 'Sex Ratio (Females per 1000 Males) All ages' column in descending order
sorted_df = df.sort_values(by=' Sex Ratio (Females per 1000 Males ) All ages', ascending=False)

# Take the top 10 rows
top_10_df = sorted_df.head(5)

# Plot the scatter plot
ax = top_10_df.plot(kind='scatter', x=df.columns[0], y=' Sex Ratio (Females per 1000 Males ) All ages', s=32, alpha=0.8)

# Remove top and right spines
ax.spines[['top', 'right']].set_visible(False)

# Set x-axis label
plt.xlabel("States and UTs")

# Show the plot
plt.show()

"""Top 5 states/union territories with the highest sex ratio.

The analysis reveals a promising link between literacy rates and mean income. The data suggests a weak positive correlation, indicating that areas with higher literacy levels tend to boast slightly higher average incomes.
"""

sns.jointplot(data=df, x='Persons who consumed any medicine without consulting healthcare provider (%)94', y='Literate (%)', kind='scatter', height=8)
plt.xlabel('Medicine consumption without consultation (%)')
plt.ylabel('Literate (%)')
plt.title('Relationship between Medicine Consumption and Literacy')
# Calculate Pearson correlation coefficient
correlation, p_value = stats.pearsonr(df['Persons who consumed any medicine without consulting healthcare provider (%)94'], df['Literate (%)'])



print("Correlation coefficient:", correlation)
print("p-value:", round(p_value, 4))
plt.tight_layout()
plt.show()

""" The joint scatter plot reveals a negative correlation between medicine consumption without consulting a healthcare provider and literacy. Areas with higher literacy tend to have lower rates of medicine consumption without consulting a healthcare provider. This suggests that individuals with better literacy skills might be more likely to seek professional medical advice before taking medication.

 The p-value of 0.0057 in the context of negative correlation test indicates a statistically significant negative correlation between literacy rate and medicine consumption without consultation.

Statistical Significance (p-value): The p-value of 0.0057 is very low. Typically, a significance level of 0.05 (or 5%) is used as a threshold. A p-value lower than this threshold indicates that the observed correlation is unlikely to be due to chance alone. In your case, with a p-value of 0.0057, there is a very strong chance (99.43%) that a true negative correlation exists between literacy and medicine consultation without consultation.

Based on the joint scatter plot and the statistically significant negative correlation (p-value = 0.0057), there's strong evidence that literacy and medicine consumption without consultation are negatively correlated. This suggests that people with higher literacy rates tend to consult healthcare providers more before taking medication.

 The p-value (0.0057) confirms a statistically significant negative correlation between literacy and medicine consumption without consultation. This means people with higher literacy rates are less likely to consume medicine without consulting a healthcare provider.
"""

import matplotlib.pyplot as plt

# Plotting hexbin plot
plt.figure(figsize=(8, 6))
plt.hexbin(df['Households with improved sanitation (%) 4'], df['Malaria (%)'], gridsize=20, cmap='viridis', alpha=0.8)

# Adding labels and title
plt.xlabel('Improved sanitation (%)')
plt.ylabel('Malaria (%)')
plt.title('Relationship between Improved Sanitation and Malaria')

# Adding a colorbar for interpretation
plt.colorbar(label='Density')

# Removing top and right spines
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)

# Showing the plot
plt.show()

"""The above hexbin plot suggests that there is a negative correlation between improved sanitation and malaria. This means that areas with a higher percentage of households with improved sanitation tend to have a lower percentage of malaria.


The data is represented by a density plot where the color intensity indicates the number of data points in a certain area. The majority of the data points are concentrated in the bottom left corner of the graph, indicating that most of the data points have low percentages of malaria and high percentages of improved sanitation.


This chart suggests that improved sanitation is associated with a decrease in malaria.
"""

# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='Bone/Joint diseases (%)48', y='60-69 Years of Household population (%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Bone/Joint diseases(%)')
ax.set_ylabel('60-69 Years of Household population (%)')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the plot
plt.show()

# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='Bone/Joint diseases (%)48', y='60-74 Years of Household population (%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Bone/Joint diseases(%)')
ax.set_ylabel('60-74 Years of Household population (%)')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming df is your DataFrame containing the data

# Plot the scatter plot
ax = df.plot(kind='scatter', x='Bone/Joint diseases (%)48', y='60-69 Years of Household population (%)', s=32, alpha=0.8, label='60-69 Years')
df.plot(kind='scatter', x='Bone/Joint diseases (%)48', y='70-79 Years of Household population (%)', s=32, alpha=0.8, ax=ax, color='orange', label='70-79 Years')
df.plot(kind='scatter', x='Bone/Joint diseases (%)48', y='80+ Years of Household population (%)', s=32, alpha=0.8, ax=ax, color='green', label='80+ Years')

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Bone/Joint diseases (%)')
ax.set_ylabel('Household population (%)')

# Calculate median values for x and y axes
x_median = df['Bone/Joint diseases (%)48'].median()
y_median_60_69 = df['60-69 Years of Household population (%)'].median()
y_median_70_79 = df['70-79 Years of Household population (%)'].median()
y_median_80_plus = df['80+ Years of Household population (%)'].median()

# Divide the data into four quadrants
quadrant_I = df[(df['Bone/Joint diseases (%)48'] > x_median) & (df['60-69 Years of Household population (%)'] > y_median_60_69)]
quadrant_II = df[(df['Bone/Joint diseases (%)48'] < x_median) & (df['60-69 Years of Household population (%)'] > y_median_60_69)]
quadrant_III = df[(df['Bone/Joint diseases (%)48'] < x_median) & (df['60-69 Years of Household population (%)'] < y_median_60_69)]
quadrant_IV = df[(df['Bone/Joint diseases (%)48'] > x_median) & (df['60-69 Years of Household population (%)'] < y_median_60_69)]

# Count the number of data points in each quadrant
count_quadrant_I = len(quadrant_I)
count_quadrant_II = len(quadrant_II)
count_quadrant_III = len(quadrant_III)
count_quadrant_IV = len(quadrant_IV)

# Plot shaded regions for each quadrant
ax.fill_betweenx(df['60-69 Years of Household population (%)'], x_median, df['Bone/Joint diseases (%)48'], where=(df['Bone/Joint diseases (%)48'] > x_median) & (df['60-69 Years of Household population (%)'] > y_median_60_69), color='skyblue', alpha=0.3)
ax.fill_betweenx(df['60-69 Years of Household population (%)'], x_median, df['Bone/Joint diseases (%)48'], where=(df['Bone/Joint diseases (%)48'] < x_median) & (df['60-69 Years of Household population (%)'] > y_median_60_69), color='orange', alpha=0.3)
ax.fill_betweenx(df['60-69 Years of Household population (%)'], x_median, df['Bone/Joint diseases (%)48'], where=(df['Bone/Joint diseases (%)48'] < x_median) & (df['60-69 Years of Household population (%)'] < y_median_60_69), color='green', alpha=0.3)
ax.fill_betweenx(df['60-69 Years of Household population (%)'], x_median, df['Bone/Joint diseases (%)48'], where=(df['Bone/Joint diseases (%)48'] > x_median) & (df['60-69 Years of Household population (%)'] < y_median_60_69), color='red', alpha=0.3)

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the legend
plt.legend()

# Show the plot
plt.show()

# Print the counts
print("Quadrant I:", count_quadrant_I)
print("Quadrant II:", count_quadrant_II)
print("Quadrant III:", count_quadrant_III)
print("Quadrant IV:", count_quadrant_IV)

"""Relationship between the percentage of people with bone/joint diseases and the household population percentage for any of the three age groups (60-69, 70-79, and 80+ years).

The conclusion that can be drawn from the scatter plot is that there is no clear correlation between them. There are data points in all four quadrants of the graph for each age group.

Specifically, quadrant I (various colors) contains data points which shows a higher percentage of bone/joint diseases and a higher household population percentage. Quadrant II (various colors) contains data points, which shows a lower percentage of bone/joint diseases and a higher household population percentage. Quadrant III (various colors) contains data points, which shows a lower percentage of bone/joint diseases and a lower household population percentage. Quadrant IV (various colors) contains data points, which shows a higher percentage of bone/joint diseases and a lower household population percentage.
"""

import seaborn as sns

# Calculate the correlation matrix
corr_matrix = df[['Bone/Joint diseases (%)48', '60-69 Years of Household population (%)', '70-79 Years of Household population (%)', '80+ Years of Household population (%)']].corr()

# Plot the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

# Add labels and title
plt.xlabel('Variables')
plt.ylabel('Variables')
plt.title('Heatmap of Correlation')

# Show the plot
plt.show()

# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='Households covered by Central Government Health Scheme (CGHS)/Employee State Insurance Scheme (ESIS) (%)', y='Health insurance coverage (%) ', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Central Govt. Health/Employee State Insurance Scheme(%)')
ax.set_ylabel('Health insurance coverage(%)')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the plot
plt.show()

"""There appears to be a weak negative correlation between the percentage of households covered by Central Government Health Scheme (CGHS) or Employee State Insurance Scheme (ESIS) and the overall health insurance coverage.

This means that in areas with a higher percentage of households covered by CGHS/ESIS, there might be a slightly lower percentage of the population with private health insurance.
The data points are scattered, indicating the relationship is not very strong. There are areas with high CGHS/ESIS coverage that also have high overall health insurance coverage, and vice versa.
Possible explanations for the observed pattern:

CGHS/ESIS might provide sufficient health coverage for some households, reducing the need for private insurance.
Areas with a higher concentration of government jobs (which might offer CGHS/ESIS benefits) might also have a lower population with employer-provided private health insurance.
"""

# Plot the scatter plot using df.plot()
ax = df.plot(kind='scatter', x='Household Monthly Per Capita Consumption Expenditure (MPCE) in INR 10', y='Household Per Capita Food Expenditure as a share of MPCE (%)', s=32, alpha=0.8)

# Set the x and y axis labels with shorter forms
ax.set_xlabel('Household Monthly Per Capita Consumption Expenditure')
ax.set_ylabel('Household Per Capita Food Expenditure')

# Remove the top and right spines from the plot
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Show the plot
plt.show()

"""The scatter plot suggests a negative correlation between household monthly per capita consumption expenditure (MPCE) and the share of expenditure spent on food. This means that as the overall spending of a household increases (higher MPCE), the proportion of that spending devoted to food tends to decrease. This observation aligns with Engel's Law, a principle in economics that states that as a household's income rises, the proportion of income spent on food decreases, while the absolute amount spent on food may increase."""